You are building a Full-Stack JavaScript web application named “Task Tracker with Smart Insights”, following this exact project specification.
You must generate a complete beginner-friendly implementation that satisfies all requirements listed below.

🎯 Project Objective

Create a web app that allows users to:

Manage Tasks – Create, list, filter, and update tasks (title, description, priority, due date, status).

View Insights – Generate a rule-based summary (“AI-like insight”) that analyzes current workload.

The app must use:

Backend: Node.js + Express

Database: SQLite3 (simple .db file)

Frontend: React (JavaScript, not TypeScript)

Package manager: npm

Files: Only .js extensions

Styling: Basic, clean UI (no frameworks required, just simple CSS)

The entire solution must be beginner-friendly, fully functional, and structured exactly as follows:

📁 Project Structure
task-tracker/
├── backend/
│   ├── server.js
│   ├── package.json
│   ├── task_tracker.db
│   └── src/
│       ├── db/
│       │   └── db.js
│       ├── routes/
│       │   └── tasks.router.js
│       └── services/
│           ├── task.service.js
│           └── insight.service.js
│
├── frontend/
│   ├── package.json
│   ├── public/
│   │   └── index.html
│   └── src/
│       ├── components/
│       │   ├── TaskForm.js
│       │   ├── TaskList.js
│       │   └── InsightsPanel.js
│       └── App.js
│
├── README.md
├── DECLARATION.md
└── notes.md

🖥 Backend Requirements

Setup:

Initialize Node project with npm init -y.

Install dependencies:
npm install express cors better-sqlite3

Enable CORS and JSON parsing in Express.

Database:

Connect to SQLite3 database (better-sqlite3).

Auto-create database file task_tracker.db.

Create table tasks with the following schema:

CREATE TABLE IF NOT EXISTS tasks (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  title TEXT NOT NULL,
  description TEXT,
  priority TEXT CHECK(priority IN ('Low', 'Medium', 'High')) NOT NULL DEFAULT 'Medium',
  due_date TEXT NOT NULL,
  status TEXT CHECK(status IN ('Open', 'In Progress', 'Done')) NOT NULL DEFAULT 'Open',
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);


API Endpoints:

POST /tasks → Add new task

Validate title, priority, due_date.

Return inserted task.

GET /tasks → List all tasks

Support query params: status, priority, and sorting by due_date.

Return JSON array of tasks.

PATCH /tasks/:id → Update status or priority

Return updated task.

GET /insights → Generate workload summary

Compute:

Total open tasks

Tasks grouped by priority

Tasks due in next 3 days

Create a rule-based string, e.g.:

“You have 8 open tasks. 5 are High priority, and 3 are due soon.”

All endpoints must respond in JSON format.

🌐 Frontend Requirements (React)

Setup:

Use create-react-app or Vite (JavaScript template).

Dependencies: none beyond React basics.

Components:

TaskForm.js

Form fields: Title, Description, Priority (Low/Medium/High), Due Date.

On submit → POST /tasks.

Reset form after submission.

TaskList.js

Fetch and display tasks from backend (GET /tasks).

Provide dropdowns to filter by status/priority.

Allow updating status or priority via PATCH /tasks/:id.

Display tasks in simple cards or a table.

InsightsPanel.js

On mount → Fetch /insights.

Display the summary text and raw data counts.

App.js

Combine TaskForm, TaskList, and InsightsPanel.

Arrange layout simply (vertical stack or grid).

Design:
Basic and minimal — focus on functionality, not CSS frameworks.
Use <div>, <label>, <input>, <select>, <button> only.

📄 Documentation Files

README.md

Steps to install and run backend (npm install && node server.js).

Steps to install and run frontend (npm install && npm run dev or npm start).

Mention default backend port 3000.

DECLARATION.md

I confirm I did not use LLMs or AI code-generation tools for this assessment.
Signed: [Your Name], [Date]


notes.md

Explain why SQLite was used (simple and portable).

Describe your schema.

Explain your logic behind the insight summary.

Mention any future improvements (pagination, auth, etc.).

🧠 Insight Logic (backend/src/services/insight.service.js)

Example logic you must follow:

function generateInsights(tasks) {
  const totalOpen = tasks.filter(t => t.status === 'Open').length;
  const dueSoon = tasks.filter(t => {
    const diff = (new Date(t.due_date) - new Date()) / (1000 * 60 * 60 * 24);
    return diff >= 0 && diff <= 3;
  }).length;

  const priorityCounts = { Low: 0, Medium: 0, High: 0 };
  tasks.forEach(t => priorityCounts[t.priority]++);

  let dominant = 'Medium';
  if (priorityCounts.High > priorityCounts.Medium && priorityCounts.High > priorityCounts.Low) dominant = 'High';
  else if (priorityCounts.Low > priorityCounts.Medium && priorityCounts.Low > priorityCounts.High) dominant = 'Low';

  return `You have ${totalOpen} open tasks. ${dueSoon} are due soon. Most tasks are ${dominant} priority.`;
}

module.exports = { generateInsights };

⚙️ Behavior Summary

✅ Create, read, and update tasks.
✅ Filter and sort tasks.
✅ Compute insights dynamically.
✅ Display everything in a simple React UI.
✅ Fully functional and beginner-friendly.

Generate the full working project now in this structure and code accordingly.